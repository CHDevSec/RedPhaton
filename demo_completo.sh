#!/bin/bash
# Demo Completo - Banner Scanner com Nmap, Nuclei e Metasploit
# Para uso no Kali Linux

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] ‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ‚ùå $1${NC}"
}

# Banner
echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    DEMO COMPLETO                            ‚ïë
‚ïë              Banner Scanner + Integra√ß√£o                    ‚ïë
‚ïë         Nmap + Nuclei + Metasploit + Relat√≥rios            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "ScanBanner.py" ]; then
    log_error "ScanBanner.py n√£o encontrado. Execute este script no diret√≥rio do projeto."
    exit 1
fi

# Verificar depend√™ncias
log "Verificando depend√™ncias..."

deps=("python3" "nmap" "nuclei" "msfconsole" "whois")
missing=()

for dep in "${deps[@]}"; do
    if command -v "$dep" &> /dev/null; then
        log_success "$dep encontrado"
    else
        log_error "$dep N√ÉO encontrado"
        missing+=("$dep")
    fi
done

if [ ${#missing[@]} -ne 0 ]; then
    log_error "Depend√™ncias faltando: ${missing[*]}"
    log "Instale as depend√™ncias antes de continuar."
    exit 1
fi

# Criar diret√≥rio para resultados
RESULT_DIR="demo_results_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$RESULT_DIR"
log "Resultados ser√£o salvos em: $RESULT_DIR"

# Alvos de teste
TARGETS=("scanme.nmap.org" "testphp.vulnweb.com")

echo
log "üéØ INICIANDO DEMONSTRA√á√ÉO COMPLETA"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# Demo 1: Scan B√°sico
echo
log "üì° DEMO 1: Scan B√°sico (Nmap + Banners + WHOIS)"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

python3 ScanBanner.py -t "${TARGETS[0]}" \
    -o "$RESULT_DIR/demo1_basico.json" \
    -v

log_success "Demo 1 conclu√≠do. Resultado: $RESULT_DIR/demo1_basico.json"

# Demo 2: Scan com Nuclei
echo
log "üîç DEMO 2: Scan com Nuclei (Vulnerabilidades)"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

python3 ScanBanner.py -t "${TARGETS[0]}" \
    --nuclei quick \
    -o "$RESULT_DIR/demo2_nuclei.json" \
    -v

log_success "Demo 2 conclu√≠do. Resultado: $RESULT_DIR/demo2_nuclei.json"

# Demo 3: Scan com Metasploit (Verify)
echo
log "üõ°Ô∏è  DEMO 3: Scan com Metasploit (Modo Verify - SEGURO)"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

python3 ScanBanner.py -t "${TARGETS[0]}" \
    --metasploit verify \
    -o "$RESULT_DIR/demo3_metasploit.json" \
    -v

log_success "Demo 3 conclu√≠do. Resultado: $RESULT_DIR/demo3_metasploit.json"

# Demo 4: Scan Completo
echo
log "üöÄ DEMO 4: Scan Completo (Nmap + Nuclei + Metasploit)"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

python3 ScanBanner.py -t "${TARGETS[0]}" \
    --nuclei comprehensive \
    --nuclei-tags cve,rce,sqli \
    --metasploit verify \
    -o "$RESULT_DIR/demo4_completo.json" \
    -v

log_success "Demo 4 conclu√≠do. Resultado: $RESULT_DIR/demo4_completo.json"

# Demo 5: M√∫ltiplos Alvos
echo
log "üìã DEMO 5: M√∫ltiplos Alvos"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Criar arquivo de alvos
echo "# Alvos de demonstra√ß√£o" > "$RESULT_DIR/alvos_demo.txt"
for target in "${TARGETS[@]}"; do
    echo "$target" >> "$RESULT_DIR/alvos_demo.txt"
done

python3 ScanBanner.py -f "$RESULT_DIR/alvos_demo.txt" \
    --nuclei quick \
    --metasploit verify \
    --delay 2 \
    -o "$RESULT_DIR/demo5_multiplos.json" \
    -v

log_success "Demo 5 conclu√≠do. Resultado: $RESULT_DIR/demo5_multiplos.json"

# Demo 6: Modo Audit
echo
log "üîí DEMO 6: Modo Audit (Simula√ß√£o Segura)"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

python3 ScanBanner.py -t "${TARGETS[0]}" \
    --audit \
    --nuclei comprehensive \
    --metasploit exploit \
    --metasploit-confirm \
    -o "$RESULT_DIR/demo6_audit.json" \
    -v

log_success "Demo 6 conclu√≠do. Resultado: $RESULT_DIR/demo6_audit.json"

# Demo 7: Relat√≥rio HTML
echo
log "üìä DEMO 7: Relat√≥rio HTML"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

python3 ScanBanner.py -t "${TARGETS[1]}" \
    --nuclei quick \
    --metasploit verify \
    -o "$RESULT_DIR/demo7_relatorio.html" \
    -v

log_success "Demo 7 conclu√≠do. Resultado: $RESULT_DIR/demo7_relatorio.html"

# An√°lise dos Resultados
echo
log "üìà AN√ÅLISE DOS RESULTADOS"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# Verificar se jq est√° dispon√≠vel para an√°lise JSON
if command -v jq &> /dev/null; then
    echo
    log "üîç Resumo dos Scans (usando jq):"
    
    for json_file in "$RESULT_DIR"/*.json; do
        if [ -f "$json_file" ]; then
            echo
            log "Arquivo: $(basename "$json_file")"
            
            # Extrair informa√ß√µes b√°sicas
            if jq -e '.summary' "$json_file" &> /dev/null; then
                echo "  üìä Resumo:"
                jq -r '.summary | to_entries[] | "    \(.key): \(.value)"' "$json_file" 2>/dev/null || echo "    Erro ao processar resumo"
            fi
            
            # Extrair riscos
            if jq -e '.results[].risk_assessment' "$json_file" &> /dev/null; then
                echo "  ‚ö†Ô∏è  Avalia√ß√£o de Risco:"
                jq -r '.results[].risk_assessment | "    N√≠vel: \(.risk_level) (Score: \(.risk_score))"' "$json_file" 2>/dev/null || echo "    Erro ao processar riscos"
            fi
        fi
    done
else
    log_warning "jq n√£o encontrado. Instale para an√°lise detalhada dos JSONs."
    log "Comando: sudo apt install jq"
fi

# Listar todos os arquivos gerados
echo
log "üìÅ ARQUIVOS GERADOS:"
ls -la "$RESULT_DIR"/

# Instru√ß√µes finais
echo
log "üéâ DEMONSTRA√á√ÉO COMPLETA FINALIZADA!"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo
log "üìã PR√ìXIMOS PASSOS:"
echo "   1. Examine os arquivos JSON em: $RESULT_DIR/"
echo "   2. Abra o relat√≥rio HTML no navegador"
echo "   3. Compare os diferentes modos de scan"
echo "   4. Teste com seus pr√≥prios alvos (autorizados!)"
echo
log "üîß COMANDOS √öTEIS:"
echo "   # Visualizar JSON com jq:"
echo "   cat $RESULT_DIR/demo4_completo.json | jq ."
echo
echo "   # Extrair apenas vulnerabilidades:"
echo "   cat $RESULT_DIR/demo4_completo.json | jq '.results[].nuclei_scan.vulnerabilities'"
echo
echo "   # Extrair exploits encontrados:"
echo "   cat $RESULT_DIR/demo4_completo.json | jq '.results[].metasploit_scan.exploits_found'"
echo
echo "   # Abrir relat√≥rio HTML:"
echo "   firefox $RESULT_DIR/demo7_relatorio.html &"
echo
log_success "Demo conclu√≠do com sucesso! üöÄ"

# Verificar se h√° relat√≥rio HTML para abrir
if [ -f "$RESULT_DIR/demo7_relatorio.html" ]; then
    echo
    read -p "Deseja abrir o relat√≥rio HTML no navegador? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if command -v firefox &> /dev/null; then
            firefox "$RESULT_DIR/demo7_relatorio.html" &
            log_success "Relat√≥rio HTML aberto no Firefox"
        elif command -v google-chrome &> /dev/null; then
            google-chrome "$RESULT_DIR/demo7_relatorio.html" &
            log_success "Relat√≥rio HTML aberto no Chrome"
        else
            log_warning "Navegador n√£o encontrado. Abra manualmente: $RESULT_DIR/demo7_relatorio.html"
        fi
    fi
fi

echo
log "üîí LEMBRE-SE: Use apenas em alvos autorizados!"
log "üìö Consulte a documenta√ß√£o em README.md e metasploit_examples.md"